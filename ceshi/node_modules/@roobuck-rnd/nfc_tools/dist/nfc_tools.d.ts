import { ReadlineParser, SerialPort } from "serialport";
import parser from "./args_parser";
import sleep from "./sleep";
interface RoobuckTag {
    MAC: string;
    SN: string;
}
/**
 * Write a string to the NFC tag. Scans for nearby tags first then writes the string desired 4 bytes at a time.
 * @param comPort SerialPort object connected to the USB NFC reader
 * @param input string to write into the NFC tag
 */
declare function writeTag(comPort: SerialPort, input: string, dataParser: ReadlineParser): Promise<void>;
/**
 * Write a string to the NFC tag. Scans for nearby tags first then writes the string desired 4 bytes at a time.
 * @param comPort SerialPort object connected to the USB NFC reader
 * @param input string to write into the NFC tag
 */
declare function writeRoobuckTag(comPort: SerialPort, input: string, dataParser: ReadlineParser): Promise<void>;
/**
 * Opens the USB port for communication
 * @param {string} port The name of the USB port the scanner is connected
 * @returns {SerialPort} The SerialPort object interface with the NFC scanner
 */
declare function openComPort(port: string, parser?: boolean): [SerialPort, ReadlineParser | null];
/**
 *
 * @param {SerialPort} comPort The SerialPort object connected to the TWN4 scanner
 * @returns {Boolean} Boolean of whether a tag was detected or not. On an unresolvable output False is returned
 */
declare function scanTag(comPort: SerialPort, dataParser: ReadlineParser): Promise<boolean>;
declare function readTag(comPort: SerialPort, dataParser: ReadlineParser, beep?: boolean): Promise<string | null>;
export { parser, sleep, writeTag, scanTag, readTag, writeRoobuckTag, openComPort, RoobuckTag };
